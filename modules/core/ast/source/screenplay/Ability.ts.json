{
  "type": "File",
  "start": 0,
  "end": 3497,
  "loc": {
    "start": {
      "line": 1,
      "column": 0,
      "index": 0
    },
    "end": {
      "line": 108,
      "column": 0,
      "index": 3497
    }
  },
  "errors": [],
  "program": {
    "type": "Program",
    "start": 0,
    "end": 3497,
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 108,
        "column": 0,
        "index": 3497
      }
    },
    "sourceType": "module",
    "interpreter": null,
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 3401,
        "end": 3496,
        "loc": {
          "start": {
            "line": 106,
            "column": 0,
            "index": 3401
          },
          "end": {
            "line": 107,
            "column": 1,
            "index": 3496
          }
        },
        "exportKind": "value",
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 3408,
          "end": 3496,
          "loc": {
            "start": {
              "line": 106,
              "column": 7,
              "index": 3408
            },
            "end": {
              "line": 107,
              "column": 1,
              "index": 3496
            }
          },
          "abstract": true,
          "id": {
            "type": "Identifier",
            "start": 3423,
            "end": 3430,
            "loc": {
              "start": {
                "line": 106,
                "column": 22,
                "index": 3423
              },
              "end": {
                "line": 106,
                "column": 29,
                "index": 3430
              },
              "identifierName": "Ability"
            },
            "name": "Ability"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 3431,
            "end": 3496,
            "loc": {
              "start": {
                "line": 106,
                "column": 30,
                "index": 3431
              },
              "end": {
                "line": 107,
                "column": 1,
                "index": 3496
              }
            },
            "body": [],
            "innerComments": [
              {
                "type": "CommentLine",
                "value": " eslint-disable-line @typescript-eslint/no-empty-interface",
                "start": 3434,
                "end": 3494,
                "loc": {
                  "start": {
                    "line": 106,
                    "column": 33,
                    "index": 3434
                  },
                  "end": {
                    "line": 106,
                    "column": 93,
                    "index": 3494
                  }
                }
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc \n *  \n * @lineNumber \n * 99 \n ",
              "start": 1,
              "end": 46,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 0,
                  "index": 1
                },
                "end": {
                  "line": 7,
                  "column": 3,
                  "index": 46
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import {\n *      Ability, actorCalled, Discardable, Initialisable,\n *      Question, UsesAbilities\n *  } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  // A low-level client we want the Actor to use, i.e. a database client:\n *  const { Client } = require('pg');\n *\n *  // A custom Ability to give an Actor access to the low-level client:\n *  class QueryPostgresDB implements Initialisable, Discardable, Ability {\n *     static as(actor: UsesAbilities) {\n *         return actor.abilityTo(QueryPostgresDB);\n *     }\n *\n *     constructor(private readonly client) {\n *     }\n *\n *     // invoked by Serenity/JS when actor.attemptsTo is first invoked\n *     initialise(): Promise<void> | void {\n *         return this.client.connect();\n *     }\n *\n *     // Helps to ensure that the Ability is not initialised more than once\n *     isInitialised(): boolean {\n *         return this.client._connected;\n *     }\n *\n *     // Discards any resources the Ability uses when the Actor is dismissed\n *     discard(): Promise<void> | void {\n *         return this.client.end();\n *     }\n *\n *     // Any custom integration APIs the custom Ability\n *     // should make available to the Actor.\n *     query(query: string) {\n *         return this.client.query(query);\n *     }\n *\n *     // ... other custom integration APIs\n *  }\n *\n *  // A custom Question to allow the Actor query the system\n *  const CurrentDBUser = () =>\n *      Question.about('current db user', actor =>\n *          QueryPostgresDB.as(actor)\n *              .query('SELECT current_user')\n *              .then(result => result.rows[0].current_user)\n *      );\n *\n *  // Example test scenario where the Actor uses an Ability to QueryPostgresDB\n *  // to assert on the username the connection has been established with\n *  describe('Serenity/JS', () => {\n *     it('can initialise and discard abilities automatically', () =>\n *         actorCalled('Debbie')\n *             .whoCan(new QueryPostgresDB(new Client()))\n *             .attemptsTo(\n *                 Ensure.that(CurrentDBUser(), equals('jan'))\n *             ));\n *  });\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
              "start": 47,
              "end": 3400,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 0,
                  "index": 47
                },
                "end": {
                  "line": 105,
                  "column": 16,
                  "index": 3400
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc \n *  \n * @lineNumber \n * 99 \n ",
            "start": 1,
            "end": 46,
            "loc": {
              "start": {
                "line": 2,
                "column": 0,
                "index": 1
              },
              "end": {
                "line": 7,
                "column": 3,
                "index": 46
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import {\n *      Ability, actorCalled, Discardable, Initialisable,\n *      Question, UsesAbilities\n *  } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  // A low-level client we want the Actor to use, i.e. a database client:\n *  const { Client } = require('pg');\n *\n *  // A custom Ability to give an Actor access to the low-level client:\n *  class QueryPostgresDB implements Initialisable, Discardable, Ability {\n *     static as(actor: UsesAbilities) {\n *         return actor.abilityTo(QueryPostgresDB);\n *     }\n *\n *     constructor(private readonly client) {\n *     }\n *\n *     // invoked by Serenity/JS when actor.attemptsTo is first invoked\n *     initialise(): Promise<void> | void {\n *         return this.client.connect();\n *     }\n *\n *     // Helps to ensure that the Ability is not initialised more than once\n *     isInitialised(): boolean {\n *         return this.client._connected;\n *     }\n *\n *     // Discards any resources the Ability uses when the Actor is dismissed\n *     discard(): Promise<void> | void {\n *         return this.client.end();\n *     }\n *\n *     // Any custom integration APIs the custom Ability\n *     // should make available to the Actor.\n *     query(query: string) {\n *         return this.client.query(query);\n *     }\n *\n *     // ... other custom integration APIs\n *  }\n *\n *  // A custom Question to allow the Actor query the system\n *  const CurrentDBUser = () =>\n *      Question.about('current db user', actor =>\n *          QueryPostgresDB.as(actor)\n *              .query('SELECT current_user')\n *              .then(result => result.rows[0].current_user)\n *      );\n *\n *  // Example test scenario where the Actor uses an Ability to QueryPostgresDB\n *  // to assert on the username the connection has been established with\n *  describe('Serenity/JS', () => {\n *     it('can initialise and discard abilities automatically', () =>\n *         actorCalled('Debbie')\n *             .whoCan(new QueryPostgresDB(new Client()))\n *             .attemptsTo(\n *                 Ensure.that(CurrentDBUser(), equals('jan'))\n *             ));\n *  });\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
            "start": 47,
            "end": 3400,
            "loc": {
              "start": {
                "line": 8,
                "column": 0,
                "index": 47
              },
              "end": {
                "line": 105,
                "column": 16,
                "index": 3400
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc \n *  \n * @lineNumber \n * 99 \n ",
      "start": 1,
      "end": 46,
      "loc": {
        "start": {
          "line": 2,
          "column": 0,
          "index": 1
        },
        "end": {
          "line": 7,
          "column": 3,
          "index": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import {\n *      Ability, actorCalled, Discardable, Initialisable,\n *      Question, UsesAbilities\n *  } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  // A low-level client we want the Actor to use, i.e. a database client:\n *  const { Client } = require('pg');\n *\n *  // A custom Ability to give an Actor access to the low-level client:\n *  class QueryPostgresDB implements Initialisable, Discardable, Ability {\n *     static as(actor: UsesAbilities) {\n *         return actor.abilityTo(QueryPostgresDB);\n *     }\n *\n *     constructor(private readonly client) {\n *     }\n *\n *     // invoked by Serenity/JS when actor.attemptsTo is first invoked\n *     initialise(): Promise<void> | void {\n *         return this.client.connect();\n *     }\n *\n *     // Helps to ensure that the Ability is not initialised more than once\n *     isInitialised(): boolean {\n *         return this.client._connected;\n *     }\n *\n *     // Discards any resources the Ability uses when the Actor is dismissed\n *     discard(): Promise<void> | void {\n *         return this.client.end();\n *     }\n *\n *     // Any custom integration APIs the custom Ability\n *     // should make available to the Actor.\n *     query(query: string) {\n *         return this.client.query(query);\n *     }\n *\n *     // ... other custom integration APIs\n *  }\n *\n *  // A custom Question to allow the Actor query the system\n *  const CurrentDBUser = () =>\n *      Question.about('current db user', actor =>\n *          QueryPostgresDB.as(actor)\n *              .query('SELECT current_user')\n *              .then(result => result.rows[0].current_user)\n *      );\n *\n *  // Example test scenario where the Actor uses an Ability to QueryPostgresDB\n *  // to assert on the username the connection has been established with\n *  describe('Serenity/JS', () => {\n *     it('can initialise and discard abilities automatically', () =>\n *         actorCalled('Debbie')\n *             .whoCan(new QueryPostgresDB(new Client()))\n *             .attemptsTo(\n *                 Ensure.that(CurrentDBUser(), equals('jan'))\n *             ));\n *  });\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
      "start": 47,
      "end": 3400,
      "loc": {
        "start": {
          "line": 8,
          "column": 0,
          "index": 47
        },
        "end": {
          "line": 105,
          "column": 16,
          "index": 3400
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-line @typescript-eslint/no-empty-interface",
      "start": 3434,
      "end": 3494,
      "loc": {
        "start": {
          "line": 106,
          "column": 33,
          "index": 3434
        },
        "end": {
          "line": 106,
          "column": 93,
          "index": 3494
        }
      }
    }
  ]
}